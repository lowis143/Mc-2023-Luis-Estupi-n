# -*- coding: utf-8 -*-
"""Taller #24

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DTqR1rNgTWxTukI8R4qMcXiLjoa1BT0s
"""

from scipy.interpolate import CubicSpline
import matplotlib.pyplot as plt
import numpy as np

def cubic_spline_interpolation(x, y, xi):
    cs = CubicSpline(x, y)
    yi = cs(xi)

    return yi


x = [0, 1, 2, 3, 4, 5, 6]
y = [3, 5, 6, 5, -2, 2, 13]
xi = 3.25

result = cubic_spline_interpolation(x, y, xi)
print(f"El valor estimado para x = {xi} mediante trazadores cúbicos es: {result}")

# Plot
x_vals = np.linspace(min(x), max(x), 100)
y_vals = cubic_spline_interpolation(x, y, x_vals)

plt.plot(x, y, 'o', label='Datos')
plt.plot(x_vals, y_vals, label='Trazadores cúbicos')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('Interpolación con Trazadores Cúbicos')
plt.grid(True)
plt.show()

"""////"""

def lagrange_interpolation(x, y, xi):
    n = len(x)
    yi = 0.0

    for i in range(n):
        term = y[i]
        for j in range(n):
            if j != i:
                term *= (xi - x[j]) / (x[i] - x[j])
        yi += term

    return yi


x = [0, 1, 2, 3, 4, 5, 6]
y = [3, 5, 6, 5, -2, 2, 13]
xi = 3.25

result = lagrange_interpolation(x, y, xi)
print(f"El valor estimado para x = {xi} mediante polinomios de Lagrange es: {result}")

import matplotlib.pyplot as plt
import numpy as np

def lagrange_interpolation(x, y, xi):
    n = len(x)
    yi = 0.0

    for i in range(n):
        term = y[i]
        for j in range(n):
            if j != i:
                term *= (xi - x[j]) / (x[i] - x[j])
        yi += term

    return yi


x = [0, 1, 2, 3, 4, 5, 6]
y = [3, 5, 6, 5, -2, 2, 13]
xi = 3.25

# Calcular valores de interpolación
y_interp = []
for xi_val in x:
    yi_val = lagrange_interpolation(x, y, xi_val)
    y_interp.append(yi_val)

# Gráficar puntos y polinomio de Lagrange
plt.plot(x, y, 'o', label='Datos')
plt.plot(x, y_interp, label='Polinomio de Lagrange')
plt.plot(xi, lagrange_interpolation(x, y, xi), 'ro', label=f'Estimado para x = {xi}')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.title('Interpolación con Polinomios de Lagrange')
plt.grid(True)
plt.show()
print(f"El valor estimado para x = {xi} mediante polinomios de Lagrange es: {result}")